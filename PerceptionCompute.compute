/**
* Copyright (c) 2021 LG Electronics, Inc.
*
* This software contains code licensed as described in LICENSE.
*
*/

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/TextureXR.hlsl"
#pragma only_renderers d3d11 vulkan metal

#pragma kernel Clear
#pragma kernel Detect

CBUFFER_START(cb0)
    float4 _TexSize;                // Rendering resolution: x: width, y: height, z: 1/width, w: 1/height
CBUFFER_END

Texture2DArray<float4> _Input;

RWStructuredBuffer<uint> _MaskBuffer;

[numthreads(64,1,1)]
void Clear (uint3 id : SV_DispatchThreadID)
{
    _MaskBuffer[id.x] = 0;
}

[numthreads(8,8,1)]
void Detect (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint) _TexSize.x || id.y >= (uint) _TexSize.y)
        return;

    const float4 idPix = _Input.Load(int4(id.xy, id.z, 0));
    const uint vId = (uint) (idPix.a * 255.0);

    if (vId == 0)
        return;

    // No interlocking added, we just want to know if any pixel with this ID is visible - thread races are fine
    _MaskBuffer[vId] = 1;
}